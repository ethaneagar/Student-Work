# y86-64 code that sets a password array and uses XOR to obfuscate it

    # original password is 6 characters
    # 0000 0000 0054 T
    # 0000 0000 4900 I
    # 0000 0042 0000 B
    # 0000 4200 0000 B
    # 0041 0000 0000 A
    # 5200 0000 0000 R
 
# This will be stored in an array that will be traversed and stored into a register as the password hex as 0x524142424954 or as seen in the y86 compiler as 90440237992276 decimal.

    # key is 6 characters,
    # 0000 0000 0052 R
    # 0000 0000 4100 A
    # 0000 0045 0000 E
    # 0000 5000 0000 P
    # 004F 0000 0000 O
    # 4C00 0000 0000 L
 
# This will be stored directly into a register as the key hex as 0x4C4F50454152 or as seen in the y86 compiler as 83903532843346 decimal.

 
# Pseudo Code:
# Setup stack
# Create an array holding each character of the password
# In main function
#        	Create pointer to the array with register %rbi
#        	Create a constant of the count of the register elements with register %rsi
#        	Call password function
# Create key with register %rcx
#        	Make a copy of the password stored in %rax into register %rbx
#        	Xor the register holding the copy of the password %rbx with the key %rcx
#        	Xor back the register holding the copy of the password %rbx with the key %rcx
# End main
# In password function
#        	Create max iterations constant of 8 in register %r8
#        	Create starting position constant of 1 in register %r9
# Initialize password register %rax to 0
# Set conditional codes for jump
# Jump to looping function
# End password function
# In looping function
#        	Get character from memory using password pointer %rdi and store it in %r10
#        	Add the returned value %r10 into the %rax register
#        	Increment the array pointer register %rdi
#        	Decrement the iterating counter
#        	Test if counter is zero
# End looping function


# Code:
# execution begins at address 0
.pos 0
        irmovq Label_Stack, %rsp   	        # set up stack pointer
        call Label_Main      	    		# execute main program
        halt              		    	# terminate program
	# array of 6 elements
        .align 8
array:
        .quad 0x000000000054                  	# T
        .quad 0x000000004900                  	# I
        .quad 0x000000420000                  	# B
        .quad 0x000042000000                  	# B
        .quad 0x004100000000                  	# A
        .quad 0x520000000000                  	# R
# main entry point
Label_Main:	
        irmovq array,%rdi                       # rdi = pointer for the array
        irmovq $6,%rsi                          # rsi = count of array elements = 6
	call Label_Password                     # password(array, count)
        irmovq $0x4C4F50454152, %rcx  	        # key = 0x4C4F50454152
        rrmovq %rax, %rbx                       # copy over the password rax into rbx
        xorq %rcx, %rbx                         # use the key to xor the password
        xorq %rcx, %rbx                         # restore the modified password in rbx
        ret
# long password(long *array, long count)
# array in rdi, count in rsi
Label_Password:
	irmovq $8,%r8                          	# constant 8
        irmovq $1,%r9                          	# constant 1
        xorq %rax,%rax                         	# password = 0
        andq %rsi,%rsi                         	# set CC
        jmp Label_Test                         	# goto Label_Test
# this goes through the array and saves it into rax
Label_Loop:	
        mrmovq (%rdi),%r10                      # get the *pointer to the array
        addq %r10,%rax                         	# add to password register
        addq %r8,%rdi                           # array++
        subq %r9,%rsi                           # count--.  Set CC
# this is the exit to the loop, returning to main
Label_Test: 	
        jne Label_Loop                          # stop when 0
        ret                                     # return
 
        # stack starts here and grows to lower addresses
        .pos 0x200
Label_Stack:
